package arriving.luggage.flight.arrivingluggage.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.client.RestTemplate;


import org.springframework.http.HttpEntity;
//import org.springframework.http.HttpStatus;


import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;

import arriving.luggage.flight.arrivingluggage.model.Checkpoint;
//import arriving.luggage.flight.arrivingluggage.model.Checkpoint2;
import arriving.luggage.flight.arrivingluggage.model.TrackingSheet;
//import arriving.luggage.flight.arrivingluggage.model.Checkpoint1;
import arriving.luggage.flight.arrivingluggage.model.Luggage;
import arriving.luggage.flight.arrivingluggage.model.Truck;


@Controller
public class TrackingsheetMENUController 
{
private String defaultURI = "http://localhost:8080/arriving/api/trackingsheets";
	
	
	@GetMapping("/trackingsheet/list")
	public String getTrackingSheets(Model model)
	{
		// The URI for GET trackingsheet
		String uri = "http://localhost:8080/arriving/api/trackingsheets";
		
		//Get a list of passengers from web service
		RestTemplate restTemplate= new RestTemplate();
		ResponseEntity<TrackingSheet[]> response = restTemplate.getForEntity(uri, TrackingSheet[].class);
		
		// Parse JSON data to array of object
		TrackingSheet trackingsheets[] = response.getBody();
		
		// Parse an array to a list object
		List<TrackingSheet> trackingsheetList = Arrays.asList(trackingsheets);
		
		//Attach list to model as attributes
		model.addAttribute("trackingsheets", trackingsheetList);
		
		return "trackingsheet";
		
	}
	

	/**
	 * This method will update or add a trackingsheet 
	 * 
	 * @param trackingsheet
	 * @return
	 */
	
	@RequestMapping("/trackingsheet/save")
	public String updateTrackingSheet(@ModelAttribute TrackingSheet trackingsheet)
	{
		// here create a new RestTemplate 
		RestTemplate restTemplate = new RestTemplate();
		
		//Create request body
		HttpEntity<TrackingSheet> request = new HttpEntity<TrackingSheet>(trackingsheet);
		
		String trackingsheetResponse = "";
		
		if (trackingsheet.getTrackingsheetID()>0)
		{
			// this block will update new trackingsheet and
			
			// send request as PUT
			
			restTemplate.put("http://localhost:8080/arriving/api/trackingsheets", request, TrackingSheet.class);
			
			
		}
		
		else
		{
			// This block will add new passenger and
			
			// Send Request as POST	
			trackingsheetResponse = restTemplate.postForObject("http://localhost:8080/arriving/api/trackingsheets", request, String.class);
			
		}
		
		System.out.println(trackingsheetResponse);
		
		//Redirect request to display a list of TrackingSheet
		return "redirect:/trackingsheet/list";
	}
	
	/**
	 * This method will get a request to retrieve info about checkpoint 1 of
	 * a specific tracking sheet. 
	 * Retrieve checkpoint information from web service
	 * add the retrieved data into model and pass into checkpoint1info.html
	 * view
	 * 
	 * @param TrackingSheetId
	 * @param model
	 * @return
	 */
	
	@GetMapping("/trackingsheet/checkpoint1/{trackingsheetID}")
	public String getTrackingSheetCheckpoint1 (@PathVariable int trackingsheetID, 
									Model model)
	{
		
		String pageTitle = "Checkpoint 1";
		TrackingSheet trackingsheet = new TrackingSheet();
		
		
		//This will get a TrackingSheet to be updated
		if(trackingsheetID > 0)
		{
			
			// Generate new URI and append PassengerId to it
			String uri = defaultURI + "/" + trackingsheetID;
			
			// Get a passenger detail from web service
			RestTemplate restTemplate = new RestTemplate();
			trackingsheet = restTemplate.getForObject(uri, TrackingSheet.class);
			
			//Give new title to the page:
			pageTitle = "Edit Checkpoint";
			
			
		}
		
		//Get the checkpoint info from web service
		RestTemplate checkpointREST = new RestTemplate();
		ResponseEntity<Checkpoint[]> responseCheckpoint =
				checkpointREST.getForEntity("htttp://localhost:8080/arriving"
						+ "/api/checkpoints", Checkpoint[].class);
		
		//Parse JSON data to an array object
		Checkpoint checkpointArray[] = responseCheckpoint.getBody();
		
		//Parse Array to a list object
		List<Checkpoint> checkpointList = Arrays.asList(checkpointArray);
		
		// Get the luggage unit info from web service
		RestTemplate restTemplateTruck = new RestTemplate();
		ResponseEntity<Truck[]> responseTruck = 
				restTemplateTruck.getForEntity("htttp://localhost:8080"
						+ "/arriving/api/trucks", Truck[].class);
		
		
		Truck truckArray[] = responseTruck.getBody();
		
		//parse Array to a list obj
		List<Truck> truckList = Arrays.asList(truckArray);
		
		RestTemplate restTemplateluggage = new RestTemplate();
		ResponseEntity<Luggage[]> responseLuggage = 
				restTemplateluggage.getForEntity("htttp://localhost:8080"
						+ "/arriving/api/luggages", Luggage[].class);
		
		
		Luggage luggageArray[] = responseLuggage.getBody();
		
		//parse Array to a list obj
		List<Luggage> luggageList = Arrays.asList(luggageArray);
		
		// Attach values to the model
		model.addAttribute("trackingsheets",trackingsheet);
		model.addAttribute("checkpoints",checkpointList);
		model.addAttribute("trucks",truckList);
		model.addAttribute("luggagess",luggageList);
		model.addAttribute("pageTitle", pageTitle);
		
		return "checkpoint1info";
	
		
		
	}
	
	/**
	 * This method will get a request to retrieve info about checkpoint 2 of
	 * a specific tracking sheet. 
	 * Retrieve checkpoint information from web service
	 * add the retrieved data into model and pass into checkpoint1info.html
	 * view
	 * 
	 * @param TrackingSheetId
	 * @param model
	 * @return
	 */
	
	@GetMapping("/trackingsheet/checkpoint2/{trackingsheetID}")
	public String getTrackingSheetCheckpoint2(@PathVariable int trackingsheetID,
			Model model)
	{
		String title = "Checkpoint 2";
		TrackingSheet trackingsheet2 = new TrackingSheet();
		
		//This block get a tracking sheet to be updated
		if(trackingsheetID > 0)
		{
			 // generate a new URI and append trackingsheetID to it
			String uri = defaultURI + "/" + trackingsheetID;
			
			// Get a checkpoint2 from web servive
			RestTemplate restTrackingSheet = new RestTemplate();
			trackingsheet2 = restTrackingSheet.getForObject(uri,
					TrackingSheet.class);

			//Give a new title to the page
			title = "Edit Checkpoint2";
		}
		
		/*
		 * The URI to get checkpoint unit
		 * List all checkpoint unit for drop down list menu
		 */
		
		
	}
	
	
	
	/**
	 * This method handles a POST request to save checkpoint 1 info of a sheet
	 * Sends a HTTP POST request to web service to save checkpoint 1
	 * 
	 * redirect to checkpoint1 input page
	 */
	
	@RequestMapping("/trackingsheet/checkpoint1/save")
	public String insertCheckpoint1(@ModelAttribute TrackingSheet trackingsheet)
	{
		String uri = defaultURI + "/checkpoint1/save";
		
		//create a new RestTemplate
		RestTemplate restTemplatecp1 = new RestTemplate();
		
		//Create a request body
		HttpEntity<TrackingSheet> request = 
				new HttpEntity<TrackingSheet>(trackingsheet);
		
		String trackingsheetCheckpoint1Response = "";
		
		if (trackingsheet.getTrackingsheetID()>0)
		{
			//this block updates a new detail and send request as PUT
			restTemplatecp1.put(defaultURI, request, TrackingSheet.class);
			
		}
		
		else
		{
			//This block as a new truck and send request as POST
			trackingsheetCheckpoint1Response = 
					restTemplatecp1.postForObject(uri, request, String.class);
		}
		
		System.out.println(trackingsheetCheckpoint1Response);
		
		
		// Rediriect to checkpoint
		
		return "redirect:/checkpoint/0";
	}
	
	
	/**
	 * This method deletes a trackingsheet
	 * 
	 * @param TrackingSheetId
	 * @return
	 */
	
	
	
	@RequestMapping("/trackingsheet/delete/{trackingsheetID}")
	public String deleteTrackingSheet(@PathVariable Integer trackingsheetID)
	{
		
		// Generate new URI, similar to the mapping in TrackingsheetRESTController
		String uri = defaultURI + "/{trackingsheetID}";
		
		// Send a DELETE request and attach the value of TrackingSheetId into URI
		RestTemplate restTemplate = new RestTemplate();
		restTemplate.delete(uri, Map.of("trackingsheetID", Integer.toString(trackingsheetID)));
		
		return "redirect:/trackingsheet/list";
		
	}
}